name: deploy to prod

on:
    push:
        branches:
            - main

jobs:
    build:
        name: Build
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: read
            statuses: write
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 18
                  cache: npm
                  cache-dependency-path: '**/package-lock.json'

            - name: Install dependencies
              run: npm ci --no-audit --no-fund

            - name: Build
              run: npm run build

            - name: Create issue if build fails
              if: failure()
              uses: JasonEtco/create-an-issue@v2
              env:
                  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
                  ACTION_TYPE: 'Build'
                  URL_ACTION_RUN: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
                  BRANCH: ${{ github.ref }}
              with:
                  assignees: ${{ github.event.sender.login }}

    lint:
        name: Lint
        runs-on: ubuntu-latest

        permissions:
            contents: read
            packages: read
            statuses: write

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 18
                  cache: npm
                  cache-dependency-path: '**/package-lock.json'

            - name: Install dependencies
              run: npm ci --no-audit --no-fund

            - name: Lint
              run: npm run lint

            - name: Create issue if lint fails
              if: failure()
              uses: JasonEtco/create-an-issue@v2
              env:
                  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
                  ACTION_TYPE: 'Lint'
                  URL_ACTION_RUN: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
                  BRANCH: ${{ github.ref }}
              with:
                  assignees: ${{ github.event.sender.login }}

    test:
        name: Test
        runs-on: ubuntu-latest
        needs: [build, lint]
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 18
                  cache: npm
                  cache-dependency-path: '**/package-lock.json'

            - name: Install dependencies
              run: npm ci --no-audit --no-fund

            - name: Test
              run: npm run test

            - name: Create issue if test fails
              if: failure()
              uses: JasonEtco/create-an-issue@v2
              env:
                  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
                  ACTION_TYPE: 'Test'
                  URL_ACTION_RUN: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
                  BRANCH: ${{ github.ref }}
              with:
                  assignees: ${{ github.event.sender.login }}

    docker:
        runs-on: ubuntu-latest
        needs: [test]
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Login to Docker hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}
            - name: Get repository name
              id: repo-name
              uses: MariachiBear/get-repo-name-action@v1.1.0
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
            - name: Build and push
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: ./Dockerfile
                  push: true
                  tags: |
                      ${{ secrets.DOCKERHUB_USERNAME }}/${{steps.repo-name.outputs.repository-name}}:latest
                      ${{ secrets.DOCKERHUB_USERNAME }}/${{steps.repo-name.outputs.repository-name}}:${{github.sha}}

            - name: Create issue if build fails
              if: failure()
              uses: JasonEtco/create-an-issue@v2
              env:
                  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
                  ACTION_TYPE: 'Push image to Docker Hub'
                  URL_ACTION_RUN: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
                  BRANCH: ${{ github.ref }}
              with:
                  assignees: ${{ github.event.sender.login }}

    deploy:
        runs-on: ubuntu-latest
        needs: [docker]
        steps:
            - name: Get repository name
              id: repo-name
              uses: MariachiBear/get-repo-name-action@v1.1.0
            - name: Deploy to Don Web
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.VPS_HOST }}
                  username: ${{ secrets.VPS_USERNAME }}
                  key: ${{ secrets.VPS_KEY }}
                  script: |
                      cd ${{ secrets.VPS_DIR }}
                      git checkout ${{ secrets.GIT_BRANCH }}
                      git pull
                      docker-compose down ${{ secrets.COMPOSE_SERVICE }}
                      docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{steps.repo-name.outputs.repository-name}}:latest
                      docker-compose up -d ${{ secrets.COMPOSE_SERVICE }}
